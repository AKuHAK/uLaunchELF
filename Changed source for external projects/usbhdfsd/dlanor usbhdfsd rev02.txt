//---------------------------------------------------------------------------
//File name:    "dlanor usbhdfsd rev02.txt"
//---------------------------------------------------------------------------
//
//dlanor: usbhdfsd Revision 02 changelog:
//
//	1:  The changes described in point 2 of revision 01 caused some problems
//      with the read access of large directories (possibly cache related). For
//      the time being 'fat_getNextDirentry' has been reverted to its old, and
//      unfortunately super-slow behaviour. But at least it works again...
//
//dlanor: usbhdfsd Revision 01 changelog:
//
//  1:  Some 'fs_open' test conditions were bugged, treating O_RDWR as if it were
//      an independent bitflag, always implying a write operation. This caused
//      writable behaviour for 0_RDONLY cases, with disastrous results.
//      Example of bugged code: "if(mode & O_RDWR || mode & O_WRONLY) {"
//      Example of corrected code: "if((mode & O_WRONLY)) {"
//
//  2:  The use of 'fat_getFirstDirentry' and 'fs_getNextDirentry' for 'fs_dread'
//      made the driver very slow for large directories, as the entire directory
//      was rescanned from the start for each new entry. This has been changed
//      by modifications to 'fat_getNextDirentry' in "fat_driver.c". The driver
//      is still very slow for write operations though (including deletions).
//
//  3:  Hotplugging devices did not work at all, as the DEVICE_DISCONNECTED flag
//      never was cleared from the status word, thus causing new reinitialization
//      for each access attempt after reconnecting a device. I've changed this by
//      letting 'fat_initDriver' in "fat_driver.c" clear that flag bit. For me
//      this now means that hotplugging works every time. Hopefully that will be
//      the case for other users too.
//
//  4:  The constant DIRENTRY_COUNT of "fat_write.c" was only 1024, allowing at
//      most 93 filenames of maximum length (FAT_MAX_NAME == 128) in a directory.
//      This could not be increased due to local RAM shortages, so I replaced the
//      local buffer scheme with a global bitmask scheme (1 bit per entry). With
//      this method the new limit is 2048 maximum length names per directory.
//
//  5:  Files with similar long-names were only assigned a maximum of 64 unique
//      short-names. This was due to a method of storing sequence numbers in split
//      locations, though no method of flagging this format was used. That can be
//      made to work, as the extra locations used would normally hold zeroes in
//      that position when not used this way, so presence of any non-zero value
//      can be used as a 'flag'. Unfortunately the function that checks which
//      sequence numbers are in use ignored all sequence numbers with a low part
//      that was zero. So once number 64 was reached, it was used for all files
//      fitting the same name pattern. I have replaced this method completely
//      with a bitmask oriented method, allowing up to 2048 different files using
//      the same name 'pattern' with different sequence numbers, per directory.
//      This mainly affects 'fat_fillDirentryInfo' and all functions that call it.
//---------------------------------------------------------------------------
//End of file:  "dlanor usbhdfsd rev02.txt"
//---------------------------------------------------------------------------
